/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto_edd.GUI;

import com.mycompany.proyecto_edd.Cita;
import java.util.Stack;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ADRIAN
 */
public class HistorialCitasGeneral extends javax.swing.JPanel {

    /**
     * Creates new form BuscarHistorialPaciente
     */
    public HistorialCitasGeneral() {
        initComponents();
        cargarCitasEnTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public void cargarCitasEnTabla() {
        Stack<Cita> listaCitas = Cita.cargarCitas();  

        DefaultTableModel modelo = (DefaultTableModel) tablaCitas.getModel();
        modelo.setRowCount(0);  // Limpiar la tabla antes de agregar nuevas filas

        for (Cita cita : listaCitas) {
            Object[] fila = {
                cita.getId(),
                cita.getPaciente().getDni(),
                cita.getPaciente().getNombres(),
                cita.getOdontologo().getNombres(),
                cita.getMotivo(),
                cita.getFecha().fechaAbreviada(),
                cita.getHora().horaAbreviada(),
                cita.getPaciente().getAlergia(),
                cita.getEstadoCita()
            };

            modelo.addRow(fila);
        }
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel18 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCitas = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        ordenarPor = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(204, 255, 255));

        jLabel18.setFont(new java.awt.Font("Poppins SemiBold", 1, 24)); // NOI18N
        jLabel18.setText("Historial de citas");

        tablaCitas.setBackground(new java.awt.Color(255, 255, 204));
        tablaCitas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID cita", "DNI", "Paciente", "Odontologo", "Motivo", "Fecha", "Hora", "Alergias", "Estado cita"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaCitas);

        jLabel2.setText("Ordenar por");

        ordenarPor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "Fecha Ascendente", "Fecha Descendente", "Estado Pendiente", "Estado Cancelado", "Estado Terminado" }));
        ordenarPor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordenarPorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel2)
                .addGap(56, 56, 56)
                .addComponent(ordenarPor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 730, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(ordenarPor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ordenarPorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordenarPorActionPerformed
        String seleccion = ordenarPor.getSelectedItem().toString();
        Stack<Cita> citas = Cita.cargarCitas();
        Stack<Cita> citasOrdenadas = new Stack<>();
        
        switch (seleccion) {
            case "Fecha Ascendente":
                citasOrdenadas = ordenarPorFechaAscendente(citas);
                break;
            case "Fecha Descendente":
                citasOrdenadas = ordenarPorFechaDescendente(citas);
                break;
            case "Estado Pendiente":
                citasOrdenadas = ordenarPorEstado(citas, "Pendiente");
                citasOrdenadas = ordenarPorId(citasOrdenadas);
                break;
            case "Estado Cancelado":
                citasOrdenadas = ordenarPorEstado(citas, "Cancelada");
                citasOrdenadas = ordenarPorId(citasOrdenadas);
                break;
            case "Estado Terminado":
                citasOrdenadas = ordenarPorEstado(citas,"Terminado");
                citasOrdenadas = ordenarPorId(citasOrdenadas);
                break;
            default:
                citasOrdenadas = citas;  // No hace nada si no se selecciona una opción válida
        }
        
        // Limpiar la tabla antes de agregar nuevas filas
        DefaultTableModel modelo = (DefaultTableModel) tablaCitas.getModel();
        modelo.setRowCount(0);

        // Añadir las citas ordenadas a la tabla
        for (Cita cita : citasOrdenadas) {
            Object[] fila = {
                cita.getId(),
                cita.getPaciente().getDni(),
                cita.getPaciente().getNombres(),
                cita.getOdontologo().getNombres(),
                cita.getMotivo(),
                cita.getFecha().fechaAbreviada(),
                cita.getHora().horaAbreviada(),
                cita.getPaciente().getAlergia(),
                cita.getEstadoCita()
            };
            modelo.addRow(fila);
        }
    }//GEN-LAST:event_ordenarPorActionPerformed
    private Stack<Cita> ordenarPorId(Stack<Cita> citas) {
        Stack<Cita> pilaOrdenada = new Stack<>();
        while (!citas.isEmpty()) {
            Cita citaActual = citas.pop();
            // Insertar en la pila ordenada de manera que los IDs estén en orden ascendente
            while (!pilaOrdenada.isEmpty() && Integer.parseInt(pilaOrdenada.peek().getId()) > Integer.parseInt(citaActual.getId())) {
                citas.push(pilaOrdenada.pop());
            }
            pilaOrdenada.push(citaActual);
        }
        return pilaOrdenada;
    }
    // Ordenar las citas por fecha ascendente
    private Stack<Cita> ordenarPorFechaAscendente(Stack<Cita> citas) {
        Stack<Cita> pilaOrdenada = new Stack<>();
        while (!citas.isEmpty()) {
            Cita citaActual = citas.pop();
            // Insertar en la pila ordenada de manera que las fechas estén en orden ascendente
            while (!pilaOrdenada.isEmpty() && pilaOrdenada.peek().getFecha().compararFecha(citaActual.getFecha()) > 0) {
                citas.push(pilaOrdenada.pop());
            }
            pilaOrdenada.push(citaActual);
        }
        return pilaOrdenada;
    }

    // Ordenar las citas por fecha descendente
    private Stack<Cita> ordenarPorFechaDescendente(Stack<Cita> citas) {
        Stack<Cita> pilaOrdenada = new Stack<>();
        while (!citas.isEmpty()) {
            Cita citaActual = citas.pop();
            // Insertar en la pila ordenada de manera que las fechas estén en orden descendente
            while (!pilaOrdenada.isEmpty() && pilaOrdenada.peek().getFecha().compararFecha(citaActual.getFecha()) < 0) {
                citas.push(pilaOrdenada.pop());
            }
            pilaOrdenada.push(citaActual);
        }
        return pilaOrdenada;
    }

    // Ordenar las citas por estado
    private Stack<Cita> ordenarPorEstado(Stack<Cita> citas, String estado) {
        Stack<Cita> pilaFiltrada = new Stack<>();
        // Filtrar las citas según el estado
        while (!citas.isEmpty()) {
            Cita cita = citas.pop();
            if (cita.getEstadoCita().equals(estado)) {
                pilaFiltrada.push(cita);
            }
        }
        return pilaFiltrada;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> ordenarPor;
    private javax.swing.JTable tablaCitas;
    // End of variables declaration//GEN-END:variables
}
